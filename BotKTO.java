import sx.blah.discord.api.ClientBuilder;
import sx.blah.discord.api.IDiscordClient;
import sx.blah.discord.api.events.EventDispatcher;
import sx.blah.discord.api.events.EventSubscriber;
import sx.blah.discord.api.events.IListener;
import sx.blah.discord.handle.impl.events.MessageReceivedEvent;
import sx.blah.discord.handle.obj.*;
import sx.blah.discord.util.DiscordException;
import sx.blah.discord.util.MissingPermissionsException;
import sx.blah.discord.util.RateLimitException;

import java.util.ArrayList;

public class BotKTO { // –ó–¥–µ—Å—å –Ω–µ –Ω—É–∂–µ–Ω implements

    public static final String ECHO_BOT_TOKEN = "MzQ4NTUyNzgzNDgzNTAyNjAy.DHommQ.FlTi97cFCSG1iOkno7DH-O21afA";
    Calculator calculator = new Calculator();

    private IDiscordClient discordClient;
    private boolean isConnected;

    public BotKTO() {
        this.isConnected = false;
    }

    private void regBot() {
        /*
         * –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å–æ–±—ã—Ç–∏–π.
		 */
        EventDispatcher dispatcher = discordClient.getDispatcher();

		/*
         * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ.
		 */
        dispatcher.registerListener(this);
    }

    public void login() throws DiscordException {
        ClientBuilder cBuilder = new ClientBuilder();
        cBuilder.withToken(BotKTO.ECHO_BOT_TOKEN);
        discordClient = cBuilder.login();
        regBot();

        this.isConnected = true;
    }

    @EventSubscriber // –û–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –µ—Å—Ç—å —Ç–∞–∫–∞—è —à—Ç—É–∫–∞
    public void handle(MessageReceivedEvent event) {

        IMessage message = event.getMessage();
        IChannel channel = message.getChannel();
        String inputMsgStr = message.getContent();
        IUser author = message.getAuthor();
        inputMsgStr = inputMsgStr.toLowerCase();

        if(inputMsgStr.startsWith("=")) { // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è, —Ç–æ –≤—ã–∑–≤–∞—Ç—å –º–µ—Ç–æ–¥
            calculator.calculate(message);
        }

        try {

                /* –ë–û–¢-–ü–†–ò–ö–û–õ–ò–°–¢ */
            if (inputMsgStr.contains("–ø–æ–≤—Ç–æ—Ä–∏")) {
                channel.sendMessage(inputMsgStr.replaceFirst("–ø–æ–≤—Ç–æ—Ä–∏", ""));
                System.out.println("–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ. –ê–≤—Ç–æ—Ä –±—ã–ª: " + author.getName());
            }
            if (inputMsgStr.equals("–ª–æ–ª")
                    || inputMsgStr.contains(" –ª–æ–ª")
                    || inputMsgStr.contains("–ª–æ–ª ")
                    || inputMsgStr.contains("–∫–µ–∫")
                    || inputMsgStr.contains("lol")) {
                message.addReaction("üéí");
                channel.sendMessage("–í–Ω–∏–º–∞–Ω–∏–µ! –®–∫–æ–ª—å–Ω–∏–∫ –¥–µ—Ç–µ–∫—Ç–µ–¥ ‚Äî " + author + "!");
                message.addReaction("üëé");
            }

            if (inputMsgStr.contains("–ø—Ä–∏–≤–µ—Ç") || inputMsgStr.contains("–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π")) {
                message.addReaction("üëã");
            }
            if (inputMsgStr.contains("–±–∞–Ω") || inputMsgStr.contains("–≤–∞–∫")) {
                ArrayList<String> banWordList = new ArrayList<String>();
                banWordList.add("–ï—Å–ª–∏ —á—Ç–æ, —É –º–µ–Ω—è –≤–∞–∫ –∑–∞ TF2");
                banWordList.add("–£ –º–µ–Ω—è –±–∞–Ω –∑–∞ –∏–≥—Ä—É, –≤ –∫–æ—Ç–æ—Ä—É—é —è –¥–∞–∂–µ –Ω–µ –∏–≥—Ä–∞–ª!");
                banWordList.add("–ú–Ω–µ –≤–∞–∫ –∑–∞ –±—Ö–æ–ø –¥–∞–ª–∏!");
                banWordList.add("–£ –º–µ–Ω—è –≤–∞–∫ –∑–∞ —Å–∫–∏–Ω—á–µ–Ω–¥–∂–µ—Ä!");
                banWordList.add("–ê –º–Ω–µ –≤–∞–∫ –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫ –¥–∞–ª–∏");
                banWordList.add("–ï—Å–ª–∏ —á—Ç–æ, —É –º–µ–Ω—è –≤–∞–∫ –∑–∞ –∫—Å 1.6");
                int caseNum = (int) (Math.random() * banWordList.size());
                channel.sendMessage(banWordList.get(caseNum));
            }
            if (inputMsgStr.contains("–∞–≤–ø") || inputMsgStr.contains("–∞–≤–∏–∫") || inputMsgStr.contains("awp")) {
                ArrayList<String> awpWordList = new ArrayList<String>();
                awpWordList.add("–î–ê–® –ê–í–ü!");
                awpWordList.add("–î–∞–π –∞–≤–∏–∫, –∞?!");
                awpWordList.add("–ú–Ω–µ –¥–∞–π –∞–≤–∏–∫, —è –ª—É—á—à–µ —Å—ã–≥—Ä–∞—é");
                awpWordList.add("–î–∞—à—å –∞–≤–∏–∫? –ù—É –≤—Å—ë ‚Äî –≥–≥...");
                awpWordList.add("–£ —Ç–µ–±—è –¥—Ä–∞–≥–æ–Ω–ª–æ—Ä?");
                awpWordList.add("–Ø –Ω–∞ —Å—Ç–∞–≤–∫–∞—Ö –¥—Ä–∞–≥–æ–Ω–ª–æ—Ä –≤—ã–∏–≥—Ä–∞–ª –Ω–µ–¥–∞–≤–Ω–æ, –Ω–æ –æ–Ω–∞ –Ω–∞ –¥—Ä—É–≥–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ, —Ç–∞–∫ —á—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å –Ω–µ –º–æ–≥—É(");
                awpWordList.add("–î–∞–π –º–Ω–µ –∞–≤–∏–∫!");
                awpWordList.add("–û—Ç–¥–∞–π –∞–≤–∏–∫!");
                awpWordList.add("–î–∞–ª –∞–≤–∏–∫, –±—ã—Å—Ç—Ä–∞!");
                awpWordList.add("–î–∞–π –∞–≤–ø –ø–æ–∂! –î–∞—à? –î–∞—à? –î–∞—à? –ù—É –∏ –ø–æ—à—ë–ª –Ω–∞ —Ö—É–π –ø–∏–¥—Ä!");
                int caseNum = (int) (Math.random() * awpWordList.size());
                channel.sendMessage(awpWordList.get(caseNum));
            }
            if (inputMsgStr.contains("csgo") || inputMsgStr.contains("–∫—Å–≥–æ") || inputMsgStr.contains("cs:go") || inputMsgStr.contains(" –∫—Å ")) {
                ArrayList<String> csgoWordList = new ArrayList<String>();
                csgoWordList.add("–ù–µ–µ–µ—Ç, —Å –≤–∞–º–∏ –≤ –∫—Å–≥–æ —è –Ω–µ –ø–æ–π–¥—É, –≤—ã –∂–µ —Ä–∞–∫–∏!");
                csgoWordList.add("–ù–µ—Ç —É–∂, —è —Å –≤–∞–º–∏ —Ö–æ–¥–∏–ª –≤ –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑, —Ç–∞–∫ —Å–ª–∏–ª –∑–≤–∞–Ω–∫—É...");
                csgoWordList.add("–£ –º–µ–Ω—è –±–∞–Ω 3 –¥–Ω—è ;(");
                csgoWordList.add("–ö–∞–∫–∏–µ —Ä–∞–Ω–≥–∏ —Ç–æ —Ö–æ—Ç—å? –ù–∏–∂–µ —Å—É–ø—Ä–∏–º–∞ –Ω–µ –ø–æ–π–¥—É");
                csgoWordList.add("–ù–∞ –º–µ–Ω—è –Ω–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–π—Ç–µ, —è —Å –¥–Ω–∏—â–∞–º–∏ –Ω–µ –∏–≥—Ä–∞—é");
                csgoWordList.add("–ö–∞–∫–æ–π –≤–∞–º –∫—Å–≥–æ, –≤–∞—à —É—Ä–æ–≤–µ–Ω—å —ç—Ç–æ –≤–∞—Ä—Ñ–µ–π—Å");
                int caseNum = (int) (Math.random() * csgoWordList.size());
                channel.sendMessage(csgoWordList.get(caseNum));
            }

            /* GRAMMAR-NAZI BOT */
            ArrayList<String> insultsWordList = new ArrayList<String>();
            insultsWordList.add("—à–∫–æ–ª—å–Ω–∏–∫");
            insultsWordList.add("–º–µ–ª–∫–∏–π –ø–∏–∑–¥—é–∫");
            insultsWordList.add("–Ω–µ–≤–µ–∂–¥–∞");
            insultsWordList.add("–Ω–µ—É—á");
            insultsWordList.add("–ø–∏—Ç–µ–∫–∞–Ω—Ç—Ä–æ–ø");
            insultsWordList.add("–±–æ–º–∂");
            insultsWordList.add("–∑–∞—Ç—É–ø–æ–∫");
            insultsWordList.add("—à–∫–æ–ª–æ–∑–∞–≤—Ä");
            insultsWordList.add("—Å–µ—Ä—ã–π");
            insultsWordList.add("—à–∫–æ–ª—å–Ω–∏–∫");
            insultsWordList.add("—à–∫–æ–ª—å–Ω–∏–∫");
            insultsWordList.add("—à–∫–æ–ª—å–Ω–∏–∫");
            insultsWordList.add("—à–∫–æ–ª—å–Ω–∏–∫");
            insultsWordList.add("—à–∫–æ–ª—å–Ω–∏–∫");
            insultsWordList.add("—à–∫–æ–ª—å–Ω–∏–∫");
            int caseNum = (int) (Math.random() * insultsWordList.size());

            if (inputMsgStr.contains("–ø–æ—à–æ–ª") || inputMsgStr.contains("–ø—Ä–∏—à–æ–ª") || inputMsgStr.contains("–ø–æ–¥–æ—à–æ–ª")) {
                channel.sendMessage(author + ", –ø—Ä–∞–≤–∏–ª—å–Ω–æ: **–ø–æ—à__—ë__–ª**, " + insultsWordList.get(caseNum));
            }
            if (inputMsgStr.contains("–ø—Ä–∏–Ω–∏—Å–∏")) {
                channel.sendMessage(author + ", –ø—Ä–∞–≤–∏–ª—å–Ω–æ: **–ø—Ä–∏–Ω__–µ__—Å–∏**, " + insultsWordList.get(caseNum));
            }
            if (inputMsgStr.contains("–∏–≥—Ä–∞–µ—à?") || inputMsgStr.contains("–∏–≥—Ä–∞–µ—à ")) {
                channel.sendMessage(author + ", –ø—Ä–∞–≤–∏–ª—å–Ω–æ: **–∏–≥—Ä–∞–µ—à__—å__**, " + insultsWordList.get(caseNum));
            }
            if (inputMsgStr.contains("–ª–æ–≥–∞–µ—Ç")) {
                channel.sendMessage(author + ", –ø—Ä–∞–≤–∏–ª—å–Ω–æ: **–ª__–∞__–≥–∞–µ—Ç**, " + insultsWordList.get(caseNum));
            }

        } catch (RateLimitException e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: " + e.getMessage());
            e.printStackTrace();
        } catch (DiscordException e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: " + e.getMessage());
            e.printStackTrace();
        } catch (MissingPermissionsException e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: " + e.getMessage());
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        // —Å–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
        BotKTO echoDiscordBot = new BotKTO();

        try {
            // –ø–æ–¥–∫–ª—é—á–∞–µ–º –±–æ—Ç –∫ —Å–µ—Ä–≤–µ—Ä—É Discord
            echoDiscordBot.login();
            System.out.println("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω.");
        } catch (DiscordException e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –±–æ—Ç–∞ –∫ Discord: " + e.getMessage());
        }
    }
}

//public class calculator {
//
//    public static void main (String[] args){
//
//        String s = args[0];
//        char [] ch = s.toCharArray();
//        String str1 = "";
//        String str2 = "";
//        String operator = "";
//        char charTmp = ' ';
//        int count = 0;
//        int countFirsDigit = 0;
//        int countSecondDigit= 0;
//        double x = 0;
//        double y = 0;
//
//        while (count < ch.length - 1){
//            char c = ch[countFirsDigit];
//
//            if(Character.isDigit(c)){//–ø—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–∏–º–≤–æ–ª —á–∏—Å–ª–æ–º
//                String strTmp = Character.toString(c);//–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ char –≤ String
//                str1 = str1.concat(strTmp);//—Å–∫–ª–µ–∏–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤
//                x = Double.parseDouble(str1);//–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —á–∏—Å–µ–ª –≤ double
//                countFirsDigit++;//—Å—á–µ—Ç—á–∏–∫ –ø–µ—Ä–≤–æ–≥–æ —á–∏—Å–ª–∞
//                count++;//–æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫
//                countSecondDigit++;//—Å—á–µ—Ç—á–∏–∫ –≤—Ç–æ—Ä–æ–≥–æ —á–∏—Å–ª–∞
//
//            } else {
//                countSecondDigit++;
//                count = countSecondDigit;
//
//                charTmp = c;//–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä
//                operator = Character.toString(charTmp);
//
//                char c2 = ch[countSecondDigit];
//
//                if(Character.isDigit(c2)){
//                    String strTmp = Character.toString(c2);
//                    str2 = str2.concat(strTmp);
//                    y = Double.parseDouble(str2);
//                }
//            }
//        }
//        if (operator.equals("*")){
//            System.out.println("= " + (x * y));
//        }
//        if (operator.equals("/")){
//            System.out.println("= " + (x / y));
//        }
//        if (operator.equals("+")){
//            System.out.println("= " + (x + y));
//        }
//        if (operator.equals("-")){
//            System.out.println("= " + (x - y));
//        }
//    }
